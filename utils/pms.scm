(define (primitive_imp exp)
  (cadr exp))

(define primitive_pcs
  (list (list '+:: +)
	(list '-:: -)
	(list '*:: *)
	(list '/:: /)
	(list '>:: >)
	(list '<:: <)
	(list '>=:: >=)
	(list '<=:: <=)
	(list '=:: =)
	(list 'abs:: abs)
	(list 'sin:: sin)
	(list 'cos:: cos)
	(list 'tg:: tan)
	(list 'arcsin:: asin)
	(list 'arccos:: acos)
	(list 'arctan:: atan)
	(list 'log:: log)
	(list 'char:: char)
	(list 'char?:: char?)
	(list 'cons:: cons)
	(list 'display:: display)
	(list 'eq?: eq?)
	(list 'eqv?:: eqv?)
	(list 'equal?:: equal?)
	(list 'even?:: even?)
	(list 'floor:: floor)
	(list 'foreach:: for-each)
	(list 'gcd:: gcd)
	(list 'length:: length)
	(list 'list:: list)
	(list 'list?:: list?)
	(list 'load:: load)
	(list 'map:: map)
	(list 'max:: max)
	(list 'min:: min)
	(list 'modulus:: modulo)
	(list 'newline:: newline)
	(list 'not:: not)
	(list 'null?:: null?)
	(list 'odd?:: odd?)
	(list 'pair?:: pair?)
	(list 'procedure?:: procedure?)
	(list 'read:: read)
	(list 'remainder:: remainder)
	(list 'reverse:: reverse)
	(list 'round:: round)
	(list 'setcar!:: set-car!)
	(list 'setcdr!:: set-cdr!)
	(list 'sqrt:: sqrt)
	(list 'string?:: string?)
	(list 'symbol?:: symbol?)
	(list 'vector:: vector)
	(list 'vector?:: vector?)
	(list 'write:: write)))

(define (primitive_nms)
  (map car primitive_pcs))

(define (primitive_obs)
  (map (lambda (exp) (list 'proc_xcmpd#2 (cadr exp)))
       primitive_pcs))
